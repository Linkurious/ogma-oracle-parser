import{_ as e,o as t,c as a,R as r}from"./chunks/framework.RPs0iv3U.js";const m=JSON.parse('{"title":"OgmaOracleParser<ND, ED>","description":"","frontmatter":{},"headers":[],"relativePath":"api/classes/OgmaOracleParser.md","filePath":"api/classes/OgmaOracleParser.md"}'),o={name:"api/classes/OgmaOracleParser.md"},d=r('<h1 id="ogmaoracleparser-nd-ed" tabindex="-1">OgmaOracleParser&lt;ND, ED&gt; <a class="header-anchor" href="#ogmaoracleparser-nd-ed" aria-label="Permalink to &quot;OgmaOracleParser\\&lt;ND, ED\\&gt;&quot;">​</a></h1><p>Parser for Oracle SQL Graph</p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ND</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;"><a href="https://doc.linkurious.com/ogma/latest/tutorials/typescript/index.html#data-typing" target="_blank" rel="noreferrer">Node data type</a></td></tr><tr><td style="text-align:left;"><code>ED</code></td><td style="text-align:left;"><code>unknown</code></td><td style="text-align:left;"><a href="https://doc.linkurious.com/ogma/latest/tutorials/typescript/index.html#data-typing" target="_blank" rel="noreferrer">Edge data type</a></td></tr></tbody></table><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>• <strong>new OgmaOracleParser</strong>&lt;<code>ND</code>, <code>ED</code>&gt;(<code>options</code>): <a href="./OgmaOracleParser.html"><code>OgmaOracleParser</code></a>&lt;<code>ND</code>, <code>ED</code>&gt;</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>options</code></td><td style="text-align:left;"><a href="./../modules.html#parseroptions"><code>ParserOptions</code></a>&lt;<code>ND</code>, <code>ED</code>&gt;</td></tr></tbody></table><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./OgmaOracleParser.html"><code>OgmaOracleParser</code></a>&lt;<code>ND</code>, <code>ED</code>&gt;</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="sqlidfromid" tabindex="-1">SQLIDfromId <a class="header-anchor" href="#sqlidfromid" aria-label="Permalink to &quot;SQLIDfromId&quot;">​</a></h3><p>• <strong>SQLIDfromId</strong>: (<code>id</code>: <code>string</code>) =&gt; `${string}{&quot;ID&quot;: ${number}}`</p><h4 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>id</code>): `${string}{&quot;ID&quot;: ${number}}`</p><p>Function to transform a string id to a SQL ID</p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p>`${string}{&quot;ID&quot;: ${number}}`</p><h3 id="sqlidtoid" tabindex="-1">SQLIDtoId <a class="header-anchor" href="#sqlidtoid" aria-label="Permalink to &quot;SQLIDtoId&quot;">​</a></h3><p>• <strong>SQLIDtoId</strong>: (<code>id</code>: `${string}{&quot;ID&quot;: ${number}}`) =&gt; <code>string</code></p><h4 id="type-declaration-1" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-1" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>id</code>): <code>string</code></p><p>Function to transform a SQL ID to a string id</p><h5 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;">`${string}{&quot;ID&quot;: ${number}}`</td></tr></tbody></table><h5 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>string</code></p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="getrawgraph" tabindex="-1">getRawGraph <a class="header-anchor" href="#getrawgraph" aria-label="Permalink to &quot;getRawGraph&quot;">​</a></h3><p>▸ <strong>getRawGraph</strong>&lt;<code>N</code>, <code>E</code>&gt;(<code>options</code>): <code>Promise</code>&lt;<code>RawGraph</code>&lt;<code>N</code>, <code>E</code>&gt;&gt;</p><p>Executes a query (wrapped in CUST_SQLGRAPH_JSON) and returns a <a href="https://doc.linkurious.com/ogma/latest/api.html#RawGraph" target="_blank" rel="noreferrer">RawGraph</a></p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>options</code></td><td style="text-align:left;"><code>Object</code></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>options.conn</code></td><td style="text-align:left;"><code>Connection</code></td><td style="text-align:left;">The connection to use</td></tr><tr><td style="text-align:left;"><code>options.maxResults?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The maximum number of elements returned (nodes + edges) (default Infinity)</td></tr><tr><td style="text-align:left;"><code>options.pageLength?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The page length (default 32000)</td></tr><tr><td style="text-align:left;"><code>options.pageStart?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">The page to start from (default 0)</td></tr><tr><td style="text-align:left;"><code>options.query</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The query to execute</td></tr></tbody></table><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<code>RawGraph</code>&lt;<code>N</code>, <code>E</code>&gt;&gt;</p><p>a RawgGraph</p><h3 id="parse" tabindex="-1">parse <a class="header-anchor" href="#parse" aria-label="Permalink to &quot;parse&quot;">​</a></h3><p>▸ <strong>parse</strong>&lt;<code>N</code>, <code>E</code>&gt;(<code>param0</code>): <code>RawGraph</code>&lt;<code>N</code>, <code>E</code>&gt;</p><p>Takes an <a href="/ogma-oracle-parser/api/modules.html#oracleresponse">OracleResponse</a> and returns a RawGraph</p><h4 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>param0</code></td><td style="text-align:left;"><a href="./../modules.html#oracleresponse"><code>OracleResponse</code></a>&lt;<code>ND</code>, <code>ED</code>&gt;</td><td style="text-align:left;">The JSON returned by CUST_SQLGRAPH_JSON</td></tr></tbody></table><h4 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>RawGraph</code>&lt;<code>N</code>, <code>E</code>&gt;</p><p>A <a href="https://doc.linkurious.com/ogma/latest/api.html#RawGraph" target="_blank" rel="noreferrer">RawGraph</a></p><h3 id="parselob" tabindex="-1">parseLob <a class="header-anchor" href="#parselob" aria-label="Permalink to &quot;parseLob&quot;">​</a></h3><p>▸ <strong>parseLob</strong>&lt;<code>N</code>, <code>E</code>&gt;(<code>lob</code>): <code>Promise</code>&lt;{ <code>edges</code>: <code>RawEdge</code>&lt;<code>E</code>&gt;[] ; <code>nodes</code>: <code>RawNode</code>&lt;<code>N</code>&gt;[] ; <code>numResults</code>: <code>number</code> = result.numResults }&gt;</p><p>Read a lob and parse it as <a href="https://doc.linkurious.com/ogma/latest/api.html#RawGraph" target="_blank" rel="noreferrer">RawGraph</a></p><h4 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>lob</code></td><td style="text-align:left;"><code>Lob</code></td></tr></tbody></table><h4 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;{ <code>edges</code>: <code>RawEdge</code>&lt;<code>E</code>&gt;[] ; <code>nodes</code>: <code>RawNode</code>&lt;<code>N</code>&gt;[] ; <code>numResults</code>: <code>number</code> = result.numResults }&gt;</p>',54),l=[d];function s(c,n,i,h,p,u){return t(),a("div",null,l)}const f=e(o,[["render",s]]);export{m as __pageData,f as default};
