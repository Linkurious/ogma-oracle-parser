import{_ as e,o as t,c as a,R as d}from"./chunks/framework.RPs0iv3U.js";const g=JSON.parse('{"title":"Types","description":"","frontmatter":{},"headers":[],"relativePath":"api/modules.md","filePath":"api/modules.md"}'),o={name:"api/modules.md"},r=d('<h1 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h1><h3 id="label" tabindex="-1">Label <a class="header-anchor" href="#label" aria-label="Permalink to &quot;Label&quot;">​</a></h3><p>Ƭ <strong>Label</strong>: <code>string</code></p><p>Label set in create property graph query</p><h3 id="oracleresponse" tabindex="-1">OracleResponse <a class="header-anchor" href="#oracleresponse" aria-label="Permalink to &quot;OracleResponse&quot;">​</a></h3><p>Ƭ <strong>OracleResponse</strong>&lt;<code>ND</code>, <code>ED</code>&gt;: <code>Object</code></p><p>Object returned by CUST_SQLGRAPH_JSON function</p><h4 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>edges</code></td><td style="text-align:left;">{ <code>id</code>: <a href="./modules.html#sqlid"><code>SQLID</code></a> ; <code>properties</code>: <code>ED</code> ; <code>source</code>: <a href="./modules.html#sqlid"><code>SQLID</code></a> ; <code>target</code>: <a href="./modules.html#sqlid"><code>SQLID</code></a> }[]</td></tr><tr><td style="text-align:left;"><code>vertices</code></td><td style="text-align:left;">{ <code>id</code>: <a href="./modules.html#sqlid"><code>SQLID</code></a> ; <code>properties</code>: <code>ND</code> }[]</td></tr></tbody></table><h3 id="parseroptions" tabindex="-1">ParserOptions <a class="header-anchor" href="#parseroptions" aria-label="Permalink to &quot;ParserOptions&quot;">​</a></h3><p>Ƭ <strong>ParserOptions</strong>&lt;<code>ND</code>, <code>ED</code>&gt;: <code>Object</code></p><h4 id="type-declaration-1" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-1" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SQLIDfromId?</code></td><td style="text-align:left;"><a href="./modules.html#sqlidfromidfn"><code>SQLIDfromIdFn</code></a></td></tr><tr><td style="text-align:left;"><code>SQLIDtoId?</code></td><td style="text-align:left;"><a href="./modules.html#sqlidtoidfn"><code>SQLIDtoIdFn</code></a></td></tr><tr><td style="text-align:left;"><code>labelFromId?</code></td><td style="text-align:left;">(<code>id</code>: <code>string</code>) =&gt; <code>string</code></td></tr><tr><td style="text-align:left;"><code>parseFn?</code></td><td style="text-align:left;"><a href="./modules.html#parsefn"><code>parseFn</code></a>&lt;<code>ND</code>, <code>ED</code>&gt;</td></tr><tr><td style="text-align:left;"><code>rowId?</code></td><td style="text-align:left;">(<code>id</code>: <code>string</code>) =&gt; <code>string</code></td></tr></tbody></table><h3 id="rowid" tabindex="-1">RowId <a class="header-anchor" href="#rowid" aria-label="Permalink to &quot;RowId&quot;">​</a></h3><p>Ƭ <strong>RowId</strong>: <code>number</code></p><p>Row ID of a node or edge in the database</p><h3 id="sqlid" tabindex="-1">SQLID <a class="header-anchor" href="#sqlid" aria-label="Permalink to &quot;SQLID&quot;">​</a></h3><p>Ƭ <strong>SQLID</strong>: `${Label}{&quot;ID&quot;: ${RowId}}`</p><p>ID Format used by CUST_SQLGRAPH_JSON</p><ul><li>Label is the label set in create property graph query</li><li>RowId is the rowid of the node or edge in the database</li></ul><h3 id="sqlidfromidfn" tabindex="-1">SQLIDfromIdFn <a class="header-anchor" href="#sqlidfromidfn" aria-label="Permalink to &quot;SQLIDfromIdFn&quot;">​</a></h3><p>Ƭ <strong>SQLIDfromIdFn</strong>: (<code>id</code>: <code>string</code>) =&gt; <a href="./modules.html#sqlid"><code>SQLID</code></a></p><h4 id="type-declaration-2" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-2" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>id</code>): <a href="./modules.html#sqlid"><code>SQLID</code></a></p><p>Function to transform back a string id to a SQL ID</p><h5 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><a href="./modules.html#sqlid"><code>SQLID</code></a></p><h3 id="sqlidtoidfn" tabindex="-1">SQLIDtoIdFn <a class="header-anchor" href="#sqlidtoidfn" aria-label="Permalink to &quot;SQLIDtoIdFn&quot;">​</a></h3><p>Ƭ <strong>SQLIDtoIdFn</strong>: (<code>id</code>: <a href="./modules.html#sqlid"><code>SQLID</code></a>) =&gt; <code>string</code></p><h4 id="type-declaration-3" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-3" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>id</code>): <code>string</code></p><p>Function used within <a href="/ogma-oracle-parser/api/classes/OgmaOracleParser.html#parse">parse functions</a> to generate the id of a node or edge from its SQLID</p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;"><a href="./modules.html#sqlid"><code>SQLID</code></a></td></tr></tbody></table><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>string</code></p><h3 id="parsefn" tabindex="-1">parseFn <a class="header-anchor" href="#parsefn" aria-label="Permalink to &quot;parseFn&quot;">​</a></h3><p>Ƭ <strong>parseFn</strong>&lt;<code>ND</code>, <code>ED</code>&gt;: (<code>opts</code>: <a href="./modules.html#oracleresponse"><code>OracleResponse</code></a>&lt;<code>ND</code>, <code>ED</code>&gt;) =&gt; { <code>edges</code>: <code>RawEdge</code>&lt;<code>ED</code>&gt;[] ; <code>nodes</code>: <code>RawNode</code>&lt;<code>ND</code>&gt;[] }</p><h4 id="type-declaration-4" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-4" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>opts</code>): <code>Object</code></p><h5 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>opts</code></td><td style="text-align:left;"><a href="./modules.html#oracleresponse"><code>OracleResponse</code></a>&lt;<code>ND</code>, <code>ED</code>&gt;</td></tr></tbody></table><h5 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Object</code></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>edges</code></td><td style="text-align:left;"><code>RawEdge</code>&lt;<code>ED</code>&gt;[]</td></tr><tr><td style="text-align:left;"><code>nodes</code></td><td style="text-align:left;"><code>RawNode</code>&lt;<code>ND</code>&gt;[]</td></tr></tbody></table>',47),l=[r];function c(s,n,i,h,p,f){return t(),a("div",null,l)}const u=e(o,[["render",c]]);export{g as __pageData,u as default};
